<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init ship
event_inherited();
global.sel_cnt = 0;
type = 'ship';
scr_ship_init(5, -1);
max_hp = 5;
refresh = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hp += 1;
refresh = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// for lasers
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control states

event_inherited();

// find enemy
if(instance_exists(obj_enemy_ship)){
    foe = instance_nearest(x, y, obj_enemy_ship);
} else{
    foe = -1;
}

if(state == 'move'){
    scr_ship_move();
} else if(state == 'idle'){
    scr_ship_idle();
}

// face direction of movement
if(foe != -1 &amp;&amp; point_distance(x, y, foe.x, foe.y) &lt;= 300 &amp;&amp; foe.type == 'ship'){
    image_angle = point_direction(x, y, foe.x, foe.y);
    if(alarm[0] == -1 &amp;&amp; weapon != -1){
        var laser = instance_create(x, y, weapon);
        laser.direction = image_angle;
        laser.image_angle = image_angle;
        if(weapon == obj_laser){
            alarm[0] = room_speed / 2;
        } else if(weapon == obj_ball){
            alarm[0] = room_speed;
        }
    }
} else if(foe != -1 &amp;&amp; point_distance(x, y, foe.x, foe.y) &lt;= 500 &amp;&amp; foe.type == 'building'){
    image_angle = point_direction(x, y, foe.x, foe.y);
    if(alarm[0] == -1 &amp;&amp; weapon != -1){
        var laser = instance_create(x, y, weapon);
        laser.direction = image_angle;
        laser.image_angle = image_angle;
        if(weapon == obj_laser){
            alarm[0] = 15;
        } else if(weapon == obj_ball){
            alarm[0] = 25;
        }
    }
} else{
    image_angle = direction;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_repair_station">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(refresh = 0){
    refresh = 1;
    alarm[1] = room_speed*3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// select unit

if(instance_exists(obj_mouse) &amp;&amp; !position_meeting(mouse_x, mouse_y, self)){
    scr_toggle_select(obj_mouse.px, obj_mouse.py, mouse_x, mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create target &amp; change to move state
if(selected == true){
    // make sure no target exists
    if((target != -1) &amp;&amp; instance_exists(target) &amp;&amp; target != obj_station &amp;&amp; target != obj_mining_station){
        with(target){
            instance_destroy();
        }
    }
    
    if(!place_meeting(mouse_x, mouse_y, obj_minimap_overlay)){
        target = instance_create(mouse_x, mouse_y, obj_target);
    } else{
        target = instance_create(obj_minimap_overlay.mx/obj_minimap_overlay.map_scale, obj_minimap_overlay.my/obj_minimap_overlay.map_scale, obj_target);
    }
    state = 'move';
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set selected
if(!selected){
    selected = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw selected

event_inherited();

if(selected == true){
    draw_set_alpha(0.25);
    draw_circle_color(x, y, 55, c_lime, c_lime, true);
    draw_set_alpha(0.1);
    draw_circle_color(x, y, 55, c_lime, c_lime, false);
    draw_set_alpha(1);
    //draw_healthbar(x-sprite_width/2, y - sprite_height/2 - sprite_height/5, x+sprite_width/2, y-sprite_height/2 - sprite_height/10, hp/max_hp*100, c_black, c_red, c_lime, 0, true, true);
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
