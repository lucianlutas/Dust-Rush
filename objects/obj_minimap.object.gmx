<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_ltblue = make_color_rgb(0, 143, 255);
c_fade_purple = make_color_rgb(172, 82, 171);

map_size = 300;
map_scale = map_size/room_width;

width = view_wview[0];
height = view_hview[0];

map_surface = surface_create(map_size, map_size);
initiate_surface = 1;

map_left = width - map_size;
map_top = height - map_size
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var map_left = width - map_size;
var map_top = height - map_size;

//draw_set_color(c_black);
//draw_rectangle(map_left - 2, 0 ,WIDTH, HEIGHT, false);



if(surface_exists(map_surface)){
    draw_surface(map_surface, map_left, map_top);
} else{
    map_surface = surface_create(map_size, map_size);
    initiate_surface = 1;
}

with(obj_dust){
    draw_set_color(c_ltgray);
    var cx = floor(x/32);//+floor(view_xview[0]/32);
        var cy = floor(y/32);//+floor(view_yview[0]/32);
        if(cx &gt; 0 &amp;&amp; cy &gt; 0 &amp;&amp; cx &lt; floor(room_width/32) &amp;&amp; cy &lt; floor(room_height/32)){
            if(obj_fow.fog_grid[# cx, cy] != 0){
                //draw_sprite(spr_fog, 0, cx*32, cy*32);
                draw_rectangle(map_left + x*other.map_scale - 3, map_top + y*other.map_scale - 3, map_left + x*other.map_scale + 3, map_top + y*other.map_scale + 3, false);
            }
        }
    //draw_rectangle(map_left + x*other.map_scale - 3, map_top + y*other.map_scale - 3, map_left + x*other.map_scale + 3, map_top + y*other.map_scale + 3, false);
}

with(obj_ship){
    if(team == TEAM_FRIENDLY){
        draw_set_color(obj_minimap.c_ltblue);
    }
    if(team == TEAM_ENEMY){
        draw_set_color(c_red);
    }
        var cx = floor(x/32);//+floor(view_xview[0]/32);
        var cy = floor(y/32);//+floor(view_yview[0]/32);
        if(cx &gt; 0 &amp;&amp; cy &gt; 0 &amp;&amp; cx &lt; floor(room_width/32) &amp;&amp; cy &lt; floor(room_height/32)){
            if(obj_fow.fog_grid[# cx, cy] != 0){
                //draw_sprite(spr_fog, 0, cx*32, cy*32);
                draw_rectangle(map_left + x*other.map_scale - 3, map_top + y*other.map_scale - 3, map_left + x*other.map_scale + 3, map_top + y*other.map_scale + 3, false);
            }
        }
    //draw_rectangle(map_left + x*other.map_scale - 3, map_top + y*other.map_scale - 3, map_left + x*other.map_scale + 3, map_top + y*other.map_scale + 3, false);
}


// draw view rect
draw_set_color(c_ltgray);
draw_rectangle(map_left + view_xview[0]*map_scale, map_top + view_yview[0]*map_scale, map_left + (view_xview[0]+view_wview[0]) * map_scale, map_top + (view_yview[0]+view_hview[0]) * map_scale, true);
draw_sprite(spr_gui_dust, 0, 0, 0);
draw_sprite(spr_gui_minimap, 0, width, height);
draw_sprite(spr_gui_name, 0, 0, height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(initiate_surface == 1){
    surface_set_target(map_surface);
    draw_clear(c_black);
    
    draw_background_tiled_ext(bg_minimap, 0, 0, map_scale, map_scale, c_white, 1);
    
    surface_reset_target();
    initiate_surface = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
